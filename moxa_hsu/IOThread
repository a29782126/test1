# 1 "/home/soic/moxa_hsu/IOThread.h"
# 1 "/usr/bin//"
# 1 "<built-in>"
# 1 "<command-line>"
# 31 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 32 "<command-line>" 2
# 1 "/home/soic/moxa_hsu/IOThread.h"
# 1 "/home/soic/moxa_hsu/CHAdeMO.h" 1
# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 424 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 442 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 443 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 444 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 425 "/usr/include/features.h" 2 3 4
# 448 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 449 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 2 3 4
# 28 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/8/include/stddef.h" 1 3 4
# 216 "/usr/lib/gcc/x86_64-linux-gnu/8/include/stddef.h" 3 4

# 216 "/usr/lib/gcc/x86_64-linux-gnu/8/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 34 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/8/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/8/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 37 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 140 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 39 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4
# 52 "/usr/include/stdio.h" 3 4
typedef __gnuc_va_list va_list;
# 63 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;
# 77 "/usr/include/stdio.h" 3 4
typedef __ssize_t ssize_t;






typedef __fpos_t fpos_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4



extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));
# 173 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile (void) ;
# 187 "/usr/include/stdio.h" 3 4
extern char *tmpnam (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;




extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;
# 204 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;







extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 227 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 246 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 279 "/usr/include/stdio.h" 3 4
extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__)) ;
# 292 "/usr/include/stdio.h" 3 4
extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__)) ;





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));
# 379 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
# 409 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__ , __leaf__))

                      ;
# 434 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 457 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 491 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 516 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 527 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 543 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 609 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 679 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 713 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 737 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 763 "/usr/include/stdio.h" 3 4
extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;



extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;







extern void perror (const char *__s);





# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];
# 788 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
# 806 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__));
# 846 "/usr/include/stdio.h" 3 4
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 864 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
# 879 "/usr/include/stdio.h" 3 4

# 2 "/home/soic/moxa_hsu/CHAdeMO.h" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/8/include/stddef.h" 1 3 4
# 328 "/usr/lib/gcc/x86_64-linux-gnu/8/include/stddef.h" 3 4
typedef int wchar_t;
# 32 "/usr/include/stdlib.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 40 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 55 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 121 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 56 "/usr/include/stdlib.h" 2 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;



extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 385 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4






typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;
# 59 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 97 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 114 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 127 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4






typedef __time_t time_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 144 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/8/include/stddef.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 177 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 193 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{

  return __builtin_bswap16 (__bsx);



}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{

  return __builtin_bswap32 (__bsx);



}
# 69 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{

  return __builtin_bswap64 (__bsx);



}
# 61 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 62 "/usr/include/endian.h" 2 3 4
# 194 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 9 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec
{
  __time_t tv_sec;
  __syscall_slong_t tv_nsec;
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



typedef __suseconds_t suseconds_t;





typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {






    __fd_mask __fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];


  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 101 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 113 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 126 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 197 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 244 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 77 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 99 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
};
# 78 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 118 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
struct __pthread_mutex_s
{
  int __lock ;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;
# 148 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
  int __kind;
 




  short __spins; short __elision;
  __pthread_list_t __list;
# 165 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
 
};




struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 245 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



# 395 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));



extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;






extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
# 563 "/usr/include/stdlib.h" 3 4
extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));


# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/8/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__ , __leaf__));






# 567 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 644 "/usr/include/stdlib.h" 3 4
extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
# 672 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 685 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 707 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 728 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 781 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;
# 797 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) ;






typedef int (*__compar_fn_t) (const void *, const void *);
# 817 "/usr/include/stdlib.h" 3 4
extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
# 837 "/usr/include/stdlib.h" 3 4
extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
# 869 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__));







extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 954 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) ;
# 1000 "/usr/include/stdlib.h" 3 4
extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1010 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 1011 "/usr/include/stdlib.h" 2 3 4
# 1020 "/usr/include/stdlib.h" 3 4

# 3 "/home/soic/moxa_hsu/CHAdeMO.h" 2
# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4

# 202 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 203 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 207 "/usr/include/unistd.h" 2 3 4
# 226 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/8/include/stddef.h" 1 3 4
# 227 "/usr/include/unistd.h" 2 3 4
# 255 "/usr/include/unistd.h" 3 4
typedef __useconds_t useconds_t;
# 267 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 287 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 304 "/usr/include/unistd.h" 3 4
extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;
# 334 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) __attribute__ ((__nothrow__ , __leaf__));
# 353 "/usr/include/unistd.h" 3 4
extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, const void *__buf, size_t __n) ;
# 376 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) ;
# 417 "/usr/include/unistd.h" 3 4
extern int pipe (int __pipedes[2]) __attribute__ ((__nothrow__ , __leaf__)) ;
# 432 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) __attribute__ ((__nothrow__ , __leaf__));
# 444 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     __attribute__ ((__nothrow__ , __leaf__));






extern int usleep (__useconds_t __useconds);
# 469 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;
# 511 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) __attribute__ ((__nothrow__ , __leaf__)) ;
# 525 "/usr/include/unistd.h" 3 4
extern char *getwd (char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;


extern int dup2 (int __fd, int __fd2) __attribute__ ((__nothrow__ , __leaf__));
# 543 "/usr/include/unistd.h" 3 4
extern char **__environ;







extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 598 "/usr/include/unistd.h" 3 4
extern int nice (int __inc) __attribute__ ((__nothrow__ , __leaf__)) ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 610 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) __attribute__ ((__nothrow__ , __leaf__));


extern long int sysconf (int __name) __attribute__ ((__nothrow__ , __leaf__));



extern size_t confstr (int __name, char *__buf, size_t __len) __attribute__ ((__nothrow__ , __leaf__));




extern __pid_t getpid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getppid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getpgrp (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t __getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));

extern __pid_t getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));






extern int setpgid (__pid_t __pid, __pid_t __pgid) __attribute__ ((__nothrow__ , __leaf__));
# 660 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) __attribute__ ((__nothrow__ , __leaf__));






extern __pid_t setsid (void) __attribute__ ((__nothrow__ , __leaf__));



extern __pid_t getsid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));



extern __uid_t getuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __uid_t geteuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getgid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getegid (void) __attribute__ ((__nothrow__ , __leaf__));




extern int getgroups (int __size, __gid_t __list[]) __attribute__ ((__nothrow__ , __leaf__)) ;
# 700 "/usr/include/unistd.h" 3 4
extern int setuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int seteuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int setgid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setregid (__gid_t __rgid, __gid_t __egid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setegid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) ;
# 756 "/usr/include/unistd.h" 3 4
extern __pid_t fork (void) __attribute__ ((__nothrow__));







extern __pid_t vfork (void) __attribute__ ((__nothrow__ , __leaf__));





extern char *ttyname (int __fd) __attribute__ ((__nothrow__ , __leaf__));



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) __attribute__ ((__nothrow__ , __leaf__));




extern int ttyslot (void) __attribute__ ((__nothrow__ , __leaf__));




extern int link (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) __attribute__ ((__nothrow__ , __leaf__));


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) __attribute__ ((__nothrow__ , __leaf__));






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4








extern char *optarg;
# 50 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));


# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 2 3 4


# 49 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4

# 870 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) __attribute__ ((__nothrow__ , __leaf__)) ;





extern int getdomainname (char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) __attribute__ ((__nothrow__ , __leaf__));


extern int revoke (const char *__file) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) __attribute__ ((__nothrow__ , __leaf__));



extern char *getusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void endusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void setusershell (void) __attribute__ ((__nothrow__ , __leaf__));





extern int daemon (int __nochdir, int __noclose) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int chroot (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);
# 967 "/usr/include/unistd.h" 3 4
extern long int gethostid (void);


extern void sync (void) __attribute__ ((__nothrow__ , __leaf__));





extern int getpagesize (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int getdtablesize (void) __attribute__ ((__nothrow__ , __leaf__));
# 991 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 1014 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) __attribute__ ((__nothrow__ , __leaf__)) ;
# 1035 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) __attribute__ ((__nothrow__ , __leaf__)) ;





extern void *sbrk (intptr_t __delta) __attribute__ ((__nothrow__ , __leaf__));
# 1056 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) __attribute__ ((__nothrow__ , __leaf__));
# 1079 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1115 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes);
# 1124 "/usr/include/unistd.h" 3 4
extern char *crypt (const char *__key, const char *__salt)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 1161 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length) ;








# 4 "/home/soic/moxa_hsu/CHAdeMO.h" 2
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/8/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 42 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 90 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 121 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 153 "/usr/include/string.h" 2 3 4


extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 225 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 252 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 272 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 302 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 329 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 384 "/usr/include/string.h" 3 4
extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));
# 409 "/usr/include/string.h" 3 4
extern int strerror_r (int __errnum, char *__buf, size_t __buflen) __asm__ ("" "__xpg_strerror_r") __attribute__ ((__nothrow__ , __leaf__))

                        __attribute__ ((__nonnull__ (2)));
# 427 "/usr/include/string.h" 3 4
extern char *strerror_l (int __errnum, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/8/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4










extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 68 "/usr/include/strings.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 96 "/usr/include/strings.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int ffsl (long int __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));



# 432 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 498 "/usr/include/string.h" 3 4

# 5 "/home/soic/moxa_hsu/CHAdeMO.h" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/time.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4

# 52 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };

typedef struct timezone *__restrict __timezone_ptr_t;
# 68 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    __timezone_ptr_t __tz) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int settimeofday (const struct timeval *__tv,
    const struct timezone *__tz)
     __attribute__ ((__nothrow__ , __leaf__));





extern int adjtime (const struct timeval *__delta,
      struct timeval *__olddelta) __attribute__ ((__nothrow__ , __leaf__));




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };






typedef int __itimer_which_t;




extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) __attribute__ ((__nothrow__ , __leaf__));




extern int setitimer (__itimer_which_t __which,
        const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) __attribute__ ((__nothrow__ , __leaf__));




extern int utimes (const char *__file, const struct timeval __tvp[2])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int lutimes (const char *__file, const struct timeval __tvp[2])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, const struct timeval __tvp[2]) __attribute__ ((__nothrow__ , __leaf__));
# 186 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4

# 6 "/home/soic/moxa_hsu/CHAdeMO.h" 2
# 1 "/usr/include/net/if.h" 1 3 4
# 26 "/usr/include/net/if.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/socket.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/8/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 2 3 4


struct iovec
  {
    void *iov_base;
    size_t iov_len;
  };
# 27 "/usr/include/x86_64-linux-gnu/sys/socket.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/8/include/stddef.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/sys/socket.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/socket.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/8/include/stddef.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/socket.h" 2 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/socket_type.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/socket_type.h" 3 4
enum __socket_type
{
  SOCK_STREAM = 1,


  SOCK_DGRAM = 2,


  SOCK_RAW = 3,

  SOCK_RDM = 4,

  SOCK_SEQPACKET = 5,


  SOCK_DCCP = 6,

  SOCK_PACKET = 10,







  SOCK_CLOEXEC = 02000000,


  SOCK_NONBLOCK = 00004000


};
# 39 "/usr/include/x86_64-linux-gnu/bits/socket.h" 2 3 4
# 172 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sockaddr.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/sockaddr.h" 3 4
typedef unsigned short int sa_family_t;
# 173 "/usr/include/x86_64-linux-gnu/bits/socket.h" 2 3 4


struct sockaddr
  {
    sa_family_t sa_family;
    char sa_data[14];
  };
# 188 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
struct sockaddr_storage
  {
    sa_family_t ss_family;
    char __ss_padding[(128 - (sizeof (unsigned short int)) - sizeof (unsigned long int))];
    unsigned long int __ss_align;
  };



enum
  {
    MSG_OOB = 0x01,

    MSG_PEEK = 0x02,

    MSG_DONTROUTE = 0x04,






    MSG_CTRUNC = 0x08,

    MSG_PROXY = 0x10,

    MSG_TRUNC = 0x20,

    MSG_DONTWAIT = 0x40,

    MSG_EOR = 0x80,

    MSG_WAITALL = 0x100,

    MSG_FIN = 0x200,

    MSG_SYN = 0x400,

    MSG_CONFIRM = 0x800,

    MSG_RST = 0x1000,

    MSG_ERRQUEUE = 0x2000,

    MSG_NOSIGNAL = 0x4000,

    MSG_MORE = 0x8000,

    MSG_WAITFORONE = 0x10000,

    MSG_BATCH = 0x40000,

    MSG_ZEROCOPY = 0x4000000,

    MSG_FASTOPEN = 0x20000000,


    MSG_CMSG_CLOEXEC = 0x40000000



  };




struct msghdr
  {
    void *msg_name;
    socklen_t msg_namelen;

    struct iovec *msg_iov;
    size_t msg_iovlen;

    void *msg_control;
    size_t msg_controllen;




    int msg_flags;
  };


struct cmsghdr
  {
    size_t cmsg_len;




    int cmsg_level;
    int cmsg_type;

    __extension__ unsigned char __cmsg_data [];

  };
# 302 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
extern struct cmsghdr *__cmsg_nxthdr (struct msghdr *__mhdr,
          struct cmsghdr *__cmsg) __attribute__ ((__nothrow__ , __leaf__));
# 329 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
enum
  {
    SCM_RIGHTS = 0x01





  };
# 390 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/socket.h" 1 3 4
# 1 "/usr/include/asm-generic/socket.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/asm/sockios.h" 1 3 4
# 1 "/usr/include/asm-generic/sockios.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/sockios.h" 2 3 4
# 6 "/usr/include/asm-generic/socket.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/socket.h" 2 3 4
# 391 "/usr/include/x86_64-linux-gnu/bits/socket.h" 2 3 4
# 444 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
struct linger
  {
    int l_onoff;
    int l_linger;
  };
# 34 "/usr/include/x86_64-linux-gnu/sys/socket.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_osockaddr.h" 1 3 4





struct osockaddr
{
  unsigned short int sa_family;
  unsigned char sa_data[14];
};
# 37 "/usr/include/x86_64-linux-gnu/sys/socket.h" 2 3 4




enum
{
  SHUT_RD = 0,

  SHUT_WR,

  SHUT_RDWR

};
# 102 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int socket (int __domain, int __type, int __protocol) __attribute__ ((__nothrow__ , __leaf__));





extern int socketpair (int __domain, int __type, int __protocol,
         int __fds[2]) __attribute__ ((__nothrow__ , __leaf__));


extern int bind (int __fd, const struct sockaddr * __addr, socklen_t __len)
     __attribute__ ((__nothrow__ , __leaf__));


extern int getsockname (int __fd, struct sockaddr *__restrict __addr,
   socklen_t *__restrict __len) __attribute__ ((__nothrow__ , __leaf__));
# 126 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int connect (int __fd, const struct sockaddr * __addr, socklen_t __len);



extern int getpeername (int __fd, struct sockaddr *__restrict __addr,
   socklen_t *__restrict __len) __attribute__ ((__nothrow__ , __leaf__));






extern ssize_t send (int __fd, const void *__buf, size_t __n, int __flags);






extern ssize_t recv (int __fd, void *__buf, size_t __n, int __flags);






extern ssize_t sendto (int __fd, const void *__buf, size_t __n,
         int __flags, const struct sockaddr * __addr,
         socklen_t __addr_len);
# 163 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern ssize_t recvfrom (int __fd, void *__restrict __buf, size_t __n,
    int __flags, struct sockaddr *__restrict __addr,
    socklen_t *__restrict __addr_len);







extern ssize_t sendmsg (int __fd, const struct msghdr *__message,
   int __flags);
# 191 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern ssize_t recvmsg (int __fd, struct msghdr *__message, int __flags);
# 208 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int getsockopt (int __fd, int __level, int __optname,
         void *__restrict __optval,
         socklen_t *__restrict __optlen) __attribute__ ((__nothrow__ , __leaf__));




extern int setsockopt (int __fd, int __level, int __optname,
         const void *__optval, socklen_t __optlen) __attribute__ ((__nothrow__ , __leaf__));





extern int listen (int __fd, int __n) __attribute__ ((__nothrow__ , __leaf__));
# 232 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int accept (int __fd, struct sockaddr *__restrict __addr,
     socklen_t *__restrict __addr_len);
# 250 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int shutdown (int __fd, int __how) __attribute__ ((__nothrow__ , __leaf__));




extern int sockatmark (int __fd) __attribute__ ((__nothrow__ , __leaf__));







extern int isfdtype (int __fd, int __fdtype) __attribute__ ((__nothrow__ , __leaf__));
# 272 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4

# 27 "/usr/include/net/if.h" 2 3 4






struct if_nameindex
  {
    unsigned int if_index;
    char *if_name;
  };




enum
  {
    IFF_UP = 0x1,

    IFF_BROADCAST = 0x2,

    IFF_DEBUG = 0x4,

    IFF_LOOPBACK = 0x8,

    IFF_POINTOPOINT = 0x10,

    IFF_NOTRAILERS = 0x20,

    IFF_RUNNING = 0x40,

    IFF_NOARP = 0x80,

    IFF_PROMISC = 0x100,



    IFF_ALLMULTI = 0x200,


    IFF_MASTER = 0x400,

    IFF_SLAVE = 0x800,


    IFF_MULTICAST = 0x1000,


    IFF_PORTSEL = 0x2000,

    IFF_AUTOMEDIA = 0x4000,

    IFF_DYNAMIC = 0x8000

  };






struct ifaddr
  {
    struct sockaddr ifa_addr;
    union
      {
 struct sockaddr ifu_broadaddr;
 struct sockaddr ifu_dstaddr;
      } ifa_ifu;
    struct iface *ifa_ifp;
    struct ifaddr *ifa_next;
  };
# 111 "/usr/include/net/if.h" 3 4
struct ifmap
  {
    unsigned long int mem_start;
    unsigned long int mem_end;
    unsigned short int base_addr;
    unsigned char irq;
    unsigned char dma;
    unsigned char port;

  };





struct ifreq
  {


    union
      {
 char ifrn_name[16];
      } ifr_ifrn;

    union
      {
 struct sockaddr ifru_addr;
 struct sockaddr ifru_dstaddr;
 struct sockaddr ifru_broadaddr;
 struct sockaddr ifru_netmask;
 struct sockaddr ifru_hwaddr;
 short int ifru_flags;
 int ifru_ivalue;
 int ifru_mtu;
 struct ifmap ifru_map;
 char ifru_slave[16];
 char ifru_newname[16];
 __caddr_t ifru_data;
      } ifr_ifru;
  };
# 176 "/usr/include/net/if.h" 3 4
struct ifconf
  {
    int ifc_len;
    union
      {
 __caddr_t ifcu_buf;
 struct ifreq *ifcu_req;
      } ifc_ifcu;
  };








extern unsigned int if_nametoindex (const char *__ifname) __attribute__ ((__nothrow__ , __leaf__));
extern char *if_indextoname (unsigned int __ifindex, char *__ifname) __attribute__ ((__nothrow__ , __leaf__));


extern struct if_nameindex *if_nameindex (void) __attribute__ ((__nothrow__ , __leaf__));


extern void if_freenameindex (struct if_nameindex *__ptr) __attribute__ ((__nothrow__ , __leaf__));


# 7 "/home/soic/moxa_hsu/CHAdeMO.h" 2


# 1 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/ioctls.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/ioctls.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/ioctls.h" 1 3 4
# 1 "/usr/include/asm-generic/ioctls.h" 1 3 4




# 1 "/usr/include/linux/ioctl.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/asm/ioctl.h" 1 3 4
# 1 "/usr/include/asm-generic/ioctl.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/ioctl.h" 2 3 4
# 6 "/usr/include/linux/ioctl.h" 2 3 4
# 6 "/usr/include/asm-generic/ioctls.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/ioctls.h" 2 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/ioctls.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/ioctl-types.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/ioctl-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/ioctls.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/ioctl-types.h" 2 3 4


struct winsize
  {
    unsigned short int ws_row;
    unsigned short int ws_col;
    unsigned short int ws_xpixel;
    unsigned short int ws_ypixel;
  };


struct termio
  {
    unsigned short int c_iflag;
    unsigned short int c_oflag;
    unsigned short int c_cflag;
    unsigned short int c_lflag;
    unsigned char c_line;
    unsigned char c_cc[8];
};
# 30 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/sys/ttydefaults.h" 1 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 2 3 4




extern int ioctl (int __fd, unsigned long int __request, ...) __attribute__ ((__nothrow__ , __leaf__));


# 10 "/home/soic/moxa_hsu/CHAdeMO.h" 2
# 1 "/usr/include/linux/can.h" 1 3 4
# 49 "/usr/include/linux/can.h" 3 4
# 1 "/usr/include/linux/types.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/asm/types.h" 1 3 4




# 1 "/usr/include/asm-generic/types.h" 1 3 4






# 1 "/usr/include/asm-generic/int-ll64.h" 1 3 4
# 12 "/usr/include/asm-generic/int-ll64.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 3 4
# 1 "/usr/include/asm-generic/bitsperlong.h" 1 3 4
# 12 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 2 3 4
# 13 "/usr/include/asm-generic/int-ll64.h" 2 3 4







typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
# 8 "/usr/include/asm-generic/types.h" 2 3 4
# 6 "/usr/include/x86_64-linux-gnu/asm/types.h" 2 3 4
# 6 "/usr/include/linux/types.h" 2 3 4



# 1 "/usr/include/linux/posix_types.h" 1 3 4




# 1 "/usr/include/linux/stddef.h" 1 3 4
# 6 "/usr/include/linux/posix_types.h" 2 3 4
# 25 "/usr/include/linux/posix_types.h" 3 4
typedef struct {
 unsigned long fds_bits[1024 / (8 * sizeof(long))];
} __kernel_fd_set;


typedef void (*__kernel_sighandler_t)(int);


typedef int __kernel_key_t;
typedef int __kernel_mqd_t;

# 1 "/usr/include/x86_64-linux-gnu/asm/posix_types.h" 1 3 4






# 1 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 3 4
typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;


typedef unsigned long __kernel_old_dev_t;


# 1 "/usr/include/asm-generic/posix_types.h" 1 3 4
# 15 "/usr/include/asm-generic/posix_types.h" 3 4
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;



typedef __kernel_ulong_t __kernel_ino_t;



typedef unsigned int __kernel_mode_t;



typedef int __kernel_pid_t;



typedef int __kernel_ipc_pid_t;



typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;



typedef __kernel_long_t __kernel_suseconds_t;



typedef int __kernel_daddr_t;



typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;
# 72 "/usr/include/asm-generic/posix_types.h" 3 4
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef __kernel_long_t __kernel_ptrdiff_t;




typedef struct {
 int val[2];
} __kernel_fsid_t;





typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_time_t;
typedef long long __kernel_time64_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
# 19 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 2 3 4
# 8 "/usr/include/x86_64-linux-gnu/asm/posix_types.h" 2 3 4
# 37 "/usr/include/linux/posix_types.h" 2 3 4
# 10 "/usr/include/linux/types.h" 2 3 4
# 24 "/usr/include/linux/types.h" 3 4
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;

typedef __u16 __sum16;
typedef __u32 __wsum;
# 47 "/usr/include/linux/types.h" 3 4
typedef unsigned __poll_t;
# 50 "/usr/include/linux/can.h" 2 3 4
# 1 "/usr/include/linux/socket.h" 1 3 4
# 12 "/usr/include/linux/socket.h" 3 4
typedef unsigned short __kernel_sa_family_t;

struct __kernel_sockaddr_storage {
 __kernel_sa_family_t ss_family;

 char __data[128 - sizeof(unsigned short)];


} __attribute__ ((aligned((__alignof__ (struct sockaddr *)))));
# 51 "/usr/include/linux/can.h" 2 3 4
# 72 "/usr/include/linux/can.h" 3 4
typedef __u32 canid_t;
# 83 "/usr/include/linux/can.h" 3 4
typedef __u32 can_err_mask_t;
# 104 "/usr/include/linux/can.h" 3 4
struct can_frame {
 canid_t can_id;
 __u8 can_dlc;
 __u8 __pad;
 __u8 __res0;
 __u8 __res1;
 __u8 data[8] __attribute__((aligned(8)));
};
# 141 "/usr/include/linux/can.h" 3 4
struct canfd_frame {
 canid_t can_id;
 __u8 len;
 __u8 flags;
 __u8 __res0;
 __u8 __res1;
 __u8 data[64] __attribute__((aligned(8)));
};
# 170 "/usr/include/linux/can.h" 3 4
struct sockaddr_can {
 __kernel_sa_family_t can_family;
 int can_ifindex;
 union {

  struct { canid_t rx_id, tx_id; } tp;


 } can_addr;
};
# 194 "/usr/include/linux/can.h" 3 4
struct can_filter {
 canid_t can_id;
 canid_t can_mask;
};
# 11 "/home/soic/moxa_hsu/CHAdeMO.h" 2
# 1 "/usr/include/linux/can/raw.h" 1 3 4
# 55 "/usr/include/linux/can/raw.h" 3 4
enum {
 CAN_RAW_FILTER = 1,
 CAN_RAW_ERR_FILTER,
 CAN_RAW_LOOPBACK,
 CAN_RAW_RECV_OWN_MSGS,
 CAN_RAW_FD_FRAMES,
 CAN_RAW_JOIN_FILTERS,
};
# 12 "/home/soic/moxa_hsu/CHAdeMO.h" 2
# 1 "/usr/local/include/mxio.h" 1 3
# 52 "/usr/local/include/mxio.h" 3
#pragma pack(1)



 const int SupportMaxChOfBit = 64>>3;

 union _ANALOG_VAL{
  float fVal;
  unsigned int iVal;
  unsigned char BytVal[4];
 };

 typedef struct _IOLOGIKSTRUCT
    {
        unsigned char BytMagic[4];
        unsigned short wVersion;
        unsigned short wLength;
        unsigned short wHWID;

        unsigned int dwSrcIP;
        unsigned char BytSrcMAC[6];
        unsigned char BytMsgType;
        unsigned short wMsgSubType;

        unsigned short wYear;
        unsigned char BytMonth;
        unsigned char BytDay;
        unsigned char BytHour;
        unsigned char BytMin;
        unsigned char BytSec;
        unsigned short wMSec;

        unsigned char BytLastSlot;
        unsigned char BytLastCh[16];


        unsigned char BytChType[16][64] ;
        unsigned short wSlotID[16];
        unsigned char BytChNumber[16][SupportMaxChOfBit] ;
        _ANALOG_VAL dwChValue[16][64] ;
        unsigned char BytChLocked[16][SupportMaxChOfBit] ;


    } __attribute__ ((packed)) IOLOGIKSTRUCT, *pIOLOGIKSTRUCT;

 typedef struct _MODULE_LIST{
     unsigned short nModuleID;
     char szModuleIP[16];
     char szMAC[6];
     char szModuleIP1[16];
     char szMAC1[6];
     char bytLanUse;
 } __attribute__ ((packed)) MODULE_LIST, *p_MODULE_LIST;

 typedef struct _ACTDEV_IO{


  char szMAC[6];
  int iHandle;
 }__attribute__ ((packed)) ACTDEV_IO, *pACTDEV_IO;


    typedef struct _W5340_INFO{
     char szIP[16];
     char szMACAddr[18];
     unsigned char bytStatus;
    }__attribute__ ((packed)) W5340_INFO, *pW5340_INFO;




#pragma pack()

 typedef void ( * pfnCALLBACK)( unsigned char bytData[], unsigned short wSize );
 typedef void ( * pfnTagDataCALLBACK)( IOLOGIKSTRUCT ios[], unsigned short* wMutex);






 int MXSIO_OpenCommport(
  char * szCommport,
  unsigned int dwBaudrate,
  unsigned char bytDataFormat,
     unsigned int dwTimeout,
  int * hCommport );

 int MXSIO_CloseCommport(
  int hCommport );

 int MXSIO_Connect(
  int hCommport,
  unsigned char bytUnitID,
  unsigned char bytTransmissionMode,
  int * hConnection);

 int MXSIO_Disconnect(
  int hConnection);






 int MXEIO_Init();

 void MXEIO_Exit();

 int MXEIO_Connect(
  char * szIP,
  unsigned short wPort,
  unsigned int dwTimeOut,
  int * hConnection );

 int MXEIO_Disconnect(
  int hConnection );

 int MXEIO_CheckConnection(
  int hConnection,
  unsigned int dwTimeOut,
  unsigned char * bytStatus );






 int MXIO_GetDllVersion ( );

 int MXIO_GetDllBuildDate ( );

 int MXIO_GetModuleType(
  int hConnection,
  unsigned char bytSlot,
  unsigned short * wType );

 int MXIO_ReadFirmwareRevision (
  int hConnection,
  unsigned char bytRevision[] );

 int MXIO_ReadFirmwareDate(
  int hConnection,
  unsigned short wDate[] );

 int MXIO_Restart(
  int hConnection );

 int MXIO_Reset(
  int hConnection );





 int MXIO_ReadCoils(
  int hConnection,
  unsigned char bytCoilType,
  unsigned short wStartCoil,
  unsigned short wCount,
  unsigned char bytCoils[] );

 int MXIO_WriteCoils(
  int hConnection,
  unsigned short wStartCoil,
  unsigned short wCount,
  unsigned char bytCoils[] );

 int MXIO_ReadRegs(
  int hConnection,
  unsigned char bytRegisterType,
  unsigned short wStartRegister,
  unsigned short wCount,
  unsigned short wRegister[] );

 int MXIO_WriteRegs(
  int hConnection,
  unsigned short wStartRegister,
  unsigned short wCount,
  unsigned short wRegister[] );






 int DI_Reads(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int * dwValue );

 int DI_Read(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytChannel,
  unsigned char * bytValue );






 int DO_Reads(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int * dwValue );

 int DO_Writes(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwValue );

 int DO_Read(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytChannel,
  unsigned char * bytValue );

 int DO_Write(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytChannel,
  unsigned char bytValue );

 int DO_GetSafeValues(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int * dwValue );

 int DO_SetSafeValues(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwValue );

 int DO_GetSafeValue(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytChannel,
  unsigned char * bytValue );

 int DO_SetSafeValue(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytChannel,
  unsigned char bytValue );
# 320 "/usr/local/include/mxio.h" 3
 int DO_GetSafeValues_W(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValues[]);

 int DO_SetSafeValues_W(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValues[]);






 int AI_Reads(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  double dValue[] );

 int AI_Read(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytChannel,
  double *dValue );

 int AI_ReadRaws(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );

 int AI_ReadRaw(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytChannel,
  unsigned short * wValue );






 int AO_Reads(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  double dValue[] );

 int AO_Writes(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  double dValue[] );

 int AO_Read(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytChannel,
  double *dValue );

 int AO_Write(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytChannel,
  double dValue );

 int AO_ReadRaws(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );

 int AO_WriteRaws(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );

 int AO_ReadRaw(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytChannel,
  unsigned short * wValue );

 int AO_WriteRaw(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytChannel,
  unsigned short wValue );

 int AO_GetSafeValues(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  double dValue[] );

 int AO_SetSafeValues(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  double dValue[] );

 int AO_GetSafeValue(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytChannel,
  double *dValue );

 int AO_SetSafeValue(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytChannel,
  double dValue );

 int AO_GetSafeRaws(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );

 int AO_SetSafeRaws(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );

 int AO_GetSafeRaw(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytChannel,
  unsigned short * wValue );

 int AO_SetSafeRaw(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytChannel,
  unsigned short wValue );






 int RTD_Read(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytChannel,
  double * dValue ) ;

 int RTD_Reads(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  double dValue[] ) ;

 int RTD_ReadRaw(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytChannel,
  unsigned short * wValue );

 int RTD_ReadRaws(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );






 int RTD2K_ResetMin(
  int hConnection,
  unsigned char bytChannel );

 int RTD2K_ResetMins(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount);

 int RTD2K_ResetMax(
  int hConnection,
  unsigned char bytChannel );

 int RTD2K_ResetMaxs(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount);

 int RTD2K_GetChannelStatus(
  int hConnection,
  unsigned char bytChannel,
  unsigned char * bytStatus );

 int RTD2K_SetChannelStatus(
  int hConnection,
  unsigned char bytChannel,
  unsigned char bytStatus );

 int RTD2K_GetChannelStatuses(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int * dwStatus );

 int RTD2K_SetChannelStatuses(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwStatus );

 int RTD2K_GetEngUnit(
  int hConnection,
  unsigned char bytChannel,
  unsigned short * wEngUnit );

 int RTD2K_SetEngUnit(
  int hConnection,
  unsigned char bytChannel,
  unsigned short wEngUnit );

 int RTD2K_GetEngUnits(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wEngUnit[] );

 int RTD2K_SetEngUnits(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wEngUnit[] );

 int RTD2K_GetSensorType(
  int hConnection,
  unsigned char bytChannel,
  unsigned short * wSensorType );

 int RTD2K_SetSensorType(
  int hConnection,
  unsigned char bytChannel,
  unsigned short wSensorType );

 int RTD2K_GetSensorTypes(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wSensorType[] );

 int RTD2K_SetSensorTypes(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wSensorType[] );

 int RTD2K_GetMathPar(
  int hConnection,
  unsigned char bytChannel,
  unsigned short * wMathPar );

 int RTD2K_SetMathPar(
  int hConnection,
  unsigned char bytChannel,
  unsigned short wMathPar );

 int RTD2K_GetMathPars(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wMathPar[] );

 int RTD2K_SetMathPars(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wMathPar[] );

 int RTD2K_ReadMinRaw(
  int hConnection,
  unsigned char bytChannel,
  unsigned short * wValue );

 int RTD2K_ReadMinRaws(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );

 int RTD2K_ReadMaxRaw(
  int hConnection,
  unsigned char bytChannel,
  unsigned short * wValue );

 int RTD2K_ReadMaxRaws(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );

 int RTD2K_ReadMin(
  int hConnection,
  unsigned char bytChannel,
  double * dValue ) ;

 int RTD2K_ReadMins(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  double dValue[] ) ;

 int RTD2K_ReadMax(
  int hConnection,
  unsigned char bytChannel,
  double * dValue ) ;

 int RTD2K_ReadMaxs(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  double dValue[] ) ;

 int RTD2K_SetChnAvg(
  int hConnection,
  unsigned char bytChannel,
  unsigned char bytChnIdx[],
  unsigned char bytChCount );

 int RTD2K_SetChnDev(
  int hConnection,
  unsigned char bytChannel,
  unsigned char bytChMinued,
  unsigned char bytChSub );






 int TC_Read(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytChannel,
  double * dValue ) ;

 int TC_Reads(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  double dValue[] ) ;

 int TC_ReadRaw(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytChannel,
  unsigned short * wValue );

 int TC_ReadRaws(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );
# 721 "/usr/local/include/mxio.h" 3
 int TC2K_ReadRaw(
  int hConnection,
  unsigned char bytChannel,
  unsigned int * dwValue );

 int TC2K_ReadRaws(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwValue[] );

 int TC2K_ResetMin(
  int hConnection,
  unsigned char bytChannel );

 int TC2K_ResetMins(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount);

 int TC2K_ResetMax(
  int hConnection,
  unsigned char bytChannel );

 int TC2K_ResetMaxs(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount);

 int TC2K_GetChannelStatus(
  int hConnection,
  unsigned char bytChannel,
  unsigned char * bytStatus );

 int TC2K_SetChannelStatus(
  int hConnection,
  unsigned char bytChannel,
  unsigned char bytStatus );

 int TC2K_GetChannelStatuses(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int * dwStatus );

 int TC2K_SetChannelStatuses(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwStatus );

 int TC2K_GetEngUnit(
  int hConnection,
  unsigned char bytChannel,
  unsigned short * wEngUnit );

 int TC2K_SetEngUnit(
  int hConnection,
  unsigned char bytChannel,
  unsigned short wEngUnit );

 int TC2K_GetEngUnits(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wEngUnit[] );

 int TC2K_SetEngUnits(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wEngUnit[] );

 int TC2K_GetSensorType(
  int hConnection,
  unsigned char bytChannel,
  unsigned short * wSensorType );

 int TC2K_SetSensorType(
  int hConnection,
  unsigned char bytChannel,
  unsigned short wSensorType );

 int TC2K_GetSensorTypes(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wSensorType[] );

 int TC2K_SetSensorTypes(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wSensorType[] );

 int TC2K_GetMathPar(
  int hConnection,
  unsigned char bytChannel,
  unsigned short * wMathPar );

 int TC2K_SetMathPar(
  int hConnection,
  unsigned char bytChannel,
  unsigned short wMathPar );

 int TC2K_GetMathPars(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wMathPar[] );

 int TC2K_SetMathPars(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wMathPar[] );

 int TC2K_ReadMinRaw(
  int hConnection,
  unsigned char bytChannel,
  unsigned int * dwValue );

 int TC2K_ReadMinRaws(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwValue[] );

 int TC2K_ReadMaxRaw(
  int hConnection,
  unsigned char bytChannel,
  unsigned int * dwValue );

 int TC2K_ReadMaxRaws(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwValue[] );

 int TC2K_ReadMin(
  int hConnection,
  unsigned char bytChannel,
  double * dValue ) ;

 int TC2K_ReadMins(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  double dValue[] ) ;

 int TC2K_ReadMax(
  int hConnection,
  unsigned char bytChannel,
  double * dValue ) ;

 int TC2K_ReadMaxs(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  double dValue[] ) ;

 int TC2K_SetChnAvg(
  int hConnection,
  unsigned char bytChannel,
  unsigned char bytChnIdx[],
  unsigned char bytChCount );

 int TC2K_SetChnDev(
  int hConnection,
  unsigned char bytChannel,
  unsigned char bytChMinued,
  unsigned char bytChSub );






 int Module2K_GetSafeStatus(
  int hConnection,
  unsigned short * wStatus );

 int Module2K_ClearSafeStatus(
  int hConnection );

 int Module2K_GetInternalReg(
  int hConnection,
  unsigned char bytChannel,
  unsigned short * wValue );

 int Module2K_SetInternalReg(
  int hConnection,
  unsigned char bytChannel,
  unsigned short wValue );

 int Module2K_GetInternalRegs(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );

 int Module2K_SetInternalRegs(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );






 int Adp4K_ReadStatus(
  int hConnection,
  unsigned short * wBusStatus,
  unsigned short * wFPStatus,
  unsigned short * wEWStatus,
  unsigned short * wESStatus,
  unsigned short * wECStatus );

 int Adp4K_ClearStatus(
  int hConnection );

 int Adp4K_ReadFirmwareRevision(
  int hConnection,
  unsigned short * wRevision );

 int Adp4K_ReadFirmwareDate(
  int hConnection,
  unsigned short wDate[] );

 int Adp4K_ReadSlotAmount(
  int hConnection,
  unsigned short * wAmount );

 int Adp4K_ReadAlarmedSlot(
  int hConnection,
  unsigned int * dwAlarm );






 int DO4K_GetSafeActions(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wAction[] );

 int DO4K_SetSafeActions(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wAction[] );

 int DO4K_GetSafeAction(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytChannel,
  unsigned short * wAction );

 int DO4K_SetSafeAction(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytChannel,
  unsigned short wAction );






 int AO4K_GetSafeActions(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wAction[] );

 int AO4K_SetSafeActions(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wAction[] );

 int AO4K_GetSafeAction(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytChannel,
  unsigned short * wAction );

 int AO4K_SetSafeAction(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytChannel,
  unsigned short wAction );






 int DIO2K_GetIOMode(
  int hConnection,
  unsigned char bytChannel,
  unsigned char * bytMode );

 int DIO2K_SetIOMode(
  int hConnection,
  unsigned char bytChannel,
  unsigned char bytMode );

 int DIO2K_GetIOModes(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int * dwMode );

 int DIO2K_SetIOModes(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwMode );






 int DI2K_GetModes(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wMode[] );

 int DI2K_SetModes(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wMode[] );

 int DI2K_GetMode(
  int hConnection,
  unsigned char bytChannel,
  unsigned short * wMode );

 int DI2K_SetMode(
  int hConnection,
  unsigned char bytChannel,
  unsigned short wMode );
 int DI2K_GetFilters(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wFilter[] );

 int DI2K_SetFilters(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wFilter[] );

 int DI2K_GetFilter(
  int hConnection,
  unsigned char bytChannel,
  unsigned short * wFilter );

 int DI2K_SetFilter(
  int hConnection,
  unsigned char bytChannel,
  unsigned short wFilter );

 int Cnt2K_GetSaveStatusesOnPowerFail(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int * dwMode );

 int Cnt2K_SetSaveStatusesOnPowerFail(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwMode );






 int DO2K_GetModes(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wMode[] );

 int DO2K_SetModes(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wMode[] );

 int DO2K_GetMode(
  int hConnection,
  unsigned char bytChannel,
  unsigned short * wMode );

 int DO2K_SetMode(
  int hConnection,
  unsigned char bytChannel,
  unsigned short wMode );

 int DO2K_GetPowerOnValues(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int * dwValue );

 int DO2K_SetPowerOnValues(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwValue );

 int DO2K_GetPowerOnValue(
  int hConnection,
  unsigned char bytChannel,
  unsigned char * bytValue );

 int DO2K_SetPowerOnValue(
  int hConnection,
  unsigned char bytChannel,
  unsigned char bytValue );

 int DO2K_GetPowerOnSeqDelaytimes(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );

 int DO2K_SetPowerOnSeqDelaytimes(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );






 int RLY2K_GetResetTime(
  int hConnection,
  unsigned char bytChannel,
  unsigned short wValue[] );

 int RLY2K_TotalCntRead(
  int hConnection,
  unsigned char bytChannel,
  unsigned int * dwValue);

 int RLY2K_TotalCntReads(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwValue[] );

 int RLY2K_CurrentCntRead(
  int hConnection,
  unsigned char bytChannel,
  unsigned int * dwValue);

 int RLY2K_CurrentCntReads(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwValue[] );

 int RLY2K_ResetCnt(
  int hConnection,
  unsigned char bytChannel );

 int RLY2K_ResetCnts(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount);






 int Cnt2K_Reads(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwValue[] );

 int Cnt2K_Clears(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount );

 int Cnt2K_Read(
  int hConnection,
  unsigned char bytChannel,
  unsigned int * dwValue );

 int Cnt2K_Clear(
  int hConnection,
  unsigned char bytChannel );

 int Cnt2K_GetOverflows(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int * dwStatus );

 int Cnt2K_ClearOverflows(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount );

 int Cnt2K_GetOverflow(
  int hConnection,
  unsigned char bytChannel,
  unsigned char * bytStatus );

 int Cnt2K_ClearOverflow(
  int hConnection,
  unsigned char bytChannel );

 int Cnt2K_GetFilters(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wFilter[] );

 int Cnt2K_SetFilters(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wFilter[] );

 int Cnt2K_GetFilter(
  int hConnection,
  unsigned char bytChannel,
  unsigned short * wFilter );

 int Cnt2K_SetFilter(
  int hConnection,
  unsigned char bytChannel,
  unsigned short wFilter );

 int Cnt2K_GetStartStatuses(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int * dwStatus );

 int Cnt2K_SetStartStatuses(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwStatus );

 int Cnt2K_GetStartStatus(
  int hConnection,
  unsigned char bytChannel,
  unsigned char * bytStatus );

 int Cnt2K_SetStartStatus(
  int hConnection,
  unsigned char bytChannel,
  unsigned char bytStatus );

 int Cnt2K_GetTriggerTypes(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int * dwType );

 int Cnt2K_SetTriggerTypes(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwType );

 int Cnt2K_GetTriggerType(
  int hConnection,
  unsigned char bytChannel,
  unsigned char * bytType );

 int Cnt2K_SetTriggerType(
  int hConnection,
  unsigned char bytChannel,
  unsigned char bytType );

 int Cnt2K_GetPowerOnValues(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int * dwValue );

 int Cnt2K_SetPowerOnValues(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwValue );

 int Cnt2K_GetPowerOnValue(
  int hConnection,
  unsigned char bytChannel,
  unsigned char * bytValue );

 int Cnt2K_SetPowerOnValue(
  int hConnection,
  unsigned char bytChannel,
  unsigned char bytValue );

 int Cnt2K_GetSafeValues(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int * dwValue );

 int Cnt2K_SetSafeValues(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwValue );

 int Cnt2K_GetSafeValue(
  int hConnection,
  unsigned char bytChannel,
  unsigned char * bytValue );

 int Cnt2K_SetSafeValue(
  int hConnection,
  unsigned char bytChannel,
  unsigned char bytValue );

 int Cnt2K_GetTriggerTypeWords(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short * wType );

 int Cnt2K_SetTriggerTypeWords(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short * wType );

 int Cnt2K_GetTriggerTypeWord(
  int hConnection,
  unsigned char bytChannel,
  unsigned short * wType );

 int Cnt2K_SetTriggerTypeWord(
  int hConnection,
  unsigned char bytChannel,
  unsigned short wType );





 int Pulse2K_GetSignalWidths(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wHiWidth[],
  unsigned short wLoWidth[] );

 int Pulse2K_SetSignalWidths(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wHiWidth[],
  unsigned short wLoWidth[] );

 int Pulse2K_GetSignalWidth(
  int hConnection,
  unsigned char bytChannel,
  unsigned short * wHiWidth,
  unsigned short * wLoWidth );

 int Pulse2K_SetSignalWidth(
  int hConnection,
  unsigned char bytChannel,
  unsigned short wHiWidth,
  unsigned short wLoWidth );


 int Pulse2K_GetSignalWidths32(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwHiWidth[],
  unsigned int dwLoWidth[] );

 int Pulse2K_SetSignalWidths32(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwHiWidth[],
  unsigned int dwLoWidth[] );

 int Pulse2K_GetSignalWidth32(
  int hConnection,
  unsigned char bytChannel,
  unsigned int * dwHiWidth,
  unsigned int * dwLoWidth );

 int Pulse2K_SetSignalWidth32(
  int hConnection,
  unsigned char bytChannel,
  unsigned int dwHiWidth,
  unsigned int dwLoWidth );


 int Pulse2K_GetOutputCounts(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwOutputCounts[] );

 int Pulse2K_SetOutputCounts(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwOutputCounts[] );

 int Pulse2K_GetOutputCount(
  int hConnection,
  unsigned char bytChannel,
  unsigned int * dwOutputCount );

 int Pulse2K_SetOutputCount(
  int hConnection,
  unsigned char bytChannel,
  unsigned int dwOutputCount );

 int Pulse2K_GetStartStatuses(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int * dwStatus );

 int Pulse2K_SetStartStatuses(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwStatus );

 int Pulse2K_GetStartStatus(
  int hConnection,
  unsigned char bytChannel,
  unsigned char * bytStatus );

 int Pulse2K_SetStartStatus(
  int hConnection,
  unsigned char bytChannel,
  unsigned char bytStatus );

 int Pulse2K_GetPowerOnValues(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int * dwValue );

 int Pulse2K_SetPowerOnValues(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwValue );

 int Pulse2K_GetPowerOnValue(
  int hConnection,
  unsigned char bytChannel,
  unsigned char * bytValue );

 int Pulse2K_SetPowerOnValue(
  int hConnection,
  unsigned char bytChannel,
  unsigned char bytValue );

 int Pulse2K_GetSafeValues(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int * dwValue );

 int Pulse2K_SetSafeValues(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwValue );

 int Pulse2K_GetSafeValue(
  int hConnection,
  unsigned char bytChannel,
  unsigned char * bytValue );

 int Pulse2K_SetSafeValue(
  int hConnection,
  unsigned char bytChannel,
  unsigned char bytValue );







 int AI2K_ReadMins(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  double dValue[] );

 int AI2K_ReadMinRaws(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );

 int AI2K_ResetMins(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount);

 int AI2K_ReadMin(
  int hConnection,
  unsigned char bytChannel,
  double *dValue );

 int AI2K_ReadMinRaw(
  int hConnection,
  unsigned char bytChannel,
  unsigned short * wValue );

 int AI2K_ResetMin(
  int hConnection,
  unsigned char bytChannel );

 int AI2K_ReadMaxs(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  double dValue[] );

 int AI2K_ReadMaxRaws(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );

 int AI2K_ResetMaxs(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount );

 int AI2K_ReadMax(
  int hConnection,
  unsigned char bytChannel,
  double *dValue );

 int AI2K_ReadMaxRaw(
  int hConnection,
  unsigned char bytChannel,
  unsigned short * wValue );

 int AI2K_ResetMax(
  int hConnection,
  unsigned char bytChannel );

 int AI2K_GetRanges(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wRange[] );

 int AI2K_SetRanges(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wRange[] );

 int AI2K_GetRange(
  int hConnection,
  unsigned char bytChannel,
  unsigned short * wRange );

 int AI2K_SetRange(
  int hConnection,
  unsigned char bytChannel,
  unsigned short wRange );

 int AI2K_GetChannelStatus(
  int hConnection,
  unsigned char bytChannel,
   unsigned short * wValue );

 int AI2K_SetChannelStatus(
  int hConnection,
  unsigned char bytChannel,
  unsigned short wValue );

 int AI2K_GetChannelStatuses(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short * wValue );


 int AI2K_SetChannelStatuses(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short * wValue );
# 1696 "/usr/local/include/mxio.h" 3
 int AO2K_GetRanges(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wRange[] );

 int AO2K_SetRanges(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wRange[] );

 int AO2K_GetRange(
  int hConnection,
  unsigned char bytChannel,
  unsigned short * wRange );

 int AO2K_SetRange(
  int hConnection,
  unsigned char bytChannel,
  unsigned short wRange );
# 1762 "/usr/local/include/mxio.h" 3
 int AO2K_GetPowerOnValues(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  double dValue[] );

 int AO2K_SetPowerOnValues(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  double dValue[] );

 int AO2K_GetPowerOnValue(
  int hConnection,
  unsigned char bytChannel,
  double *dValue );

 int AO2K_SetPowerOnValue(
  int hConnection,
  unsigned char bytChannel,
  double dValue );

 int AO2K_GetPowerOnRaws(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );

 int AO2K_SetPowerOnRaws(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );

 int AO2K_GetPowerOnRaw(
  int hConnection,
  unsigned char bytChannel,
  unsigned short * wValue );

 int AO2K_SetPowerOnRaw(
  int hConnection,
  unsigned char bytChannel,
  unsigned short wValue );






 int Logic2K_GetStartStatus(
  int hConnection,
  unsigned short * wStatus );

 int Logic2K_SetStartStatus(
  int hConnection,
  unsigned short wStatus );






 int Message2K_Start(
  int iProtocol,
  unsigned short wPort,
  pfnCALLBACK iProcAddress );

 int Message2K_Stop(
  int iProtocol );
# 1847 "/usr/local/include/mxio.h" 3
 int E42_GetInternalRegs(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );

 int E42_SetInternalRegs(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );

 int E42_GetIOMapMode(
  int hConnection,
  unsigned short * wValue );

 int E42_SetIOMapMode(
  int hConnection,
  unsigned short wValue );

 int E42_ReadStatus(
  int hConnection,
  unsigned short * wState,
  unsigned short * wLastErrorCode );

 int E42_ClearStatus(
  int hConnection );

 int E42_ReadSlotAmount(
  int hConnection,
  unsigned short * wAmount );

 int E42_AO_GetSafeActions(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wAction[] );

 int E42_AO_SetSafeActions(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wAction[] );
# 1907 "/usr/local/include/mxio.h" 3
 int E42_AO_GetPowerOnValues(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );

 int E42_AO_SetPowerOnValues(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );

 int E42_Message_Start(
  int iProtocol,
  unsigned short wPort,
  pfnCALLBACK iProcAddress );

 int E42_Message_Stop(
  int iProtocol );

 int E42_Logic_GetStartStatus(
  int hConnection,
  unsigned short *wStatus );

 int E42_Logic_SetStartStatus(
  int hConnection,
  unsigned short wStatus );

 int E42_ReadFirmwareRevision (
  int hConnection,
  unsigned char bytRevision[] );

 int E42_ReadFirmwareDate(
  int hConnection,
  unsigned short wDate[] );

 int E42_DI_Reads(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int * dwValue );

 int E42_DO_Reads(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int * dwValue );

 int E42_DO_Writes(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwValue );

 int E42_AI_Reads(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  double dValue[] );

 int E42_AI_ReadRaws(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );

 int E42_AO_Reads(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  double dValue[] );

 int E42_AO_Writes(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  double dValue[] );

 int E42_AO_ReadRaws(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );

 int E42_AO_WriteRaws(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );
# 2022 "/usr/local/include/mxio.h" 3
 int E42_AO_GetFaultValues(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );

 int E42_AO_SetFaultValues(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );

 int E42_RTD_Reads(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  double dValue[] ) ;

 int E42_RTD_ReadRaws(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );

 int E42_TC_Reads(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  double dValue[] ) ;

 int E42_TC_ReadRaws(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );

 int E42_DO_GetSafeActions(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int wAction[] );

 int E42_DO_SetSafeActions(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int wAction );

 int E42_DO_GetFaultValues(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwValue[]);

 int E42_DO_SetFaultValues(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwValue);

 int E42_DO_GetPowerOnValues(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwValue[] );

 int E42_DO_SetPowerOnValues(
  int hConnection,
  unsigned char bytSlot,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned int dwValue);

 int E42_Modbus_List(
  int hConnection,
  char* FilePath);

 int E42_RTD_GetEngUnit(
  int hConnection,
  unsigned char bytSlot,
  unsigned short wEngUnit[] );

 int E42_RTD_SetEngUnit(
  int hConnection,
  unsigned char bytSlot,
  unsigned short wEngUnit );

 int E42_RTD_GetSensorType(
  int hConnection,
  unsigned char bytSlot,
  unsigned short wSensorType[] );

 int E42_RTD_SetSensorType(
  int hConnection,
  unsigned char bytSlot,
  unsigned short wSensorType );

 int E42_TC_GetEngUnit(
  int hConnection,
  unsigned char bytSlot,
  unsigned short wEngUnit[] );

 int E42_TC_SetEngUnit(
  int hConnection,
  unsigned char bytSlot,
  unsigned short wEngUnit );

 int E42_TC_GetSensorType(
  int hConnection,
  unsigned char bytSlot,
  unsigned short wSensorType[] );

 int E42_TC_SetSensorType(
  int hConnection,
  unsigned char bytSlot,
  unsigned short wSensorType );

 int E42_GetWorkInternalRegs(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );

 int E42_SetWorkInternalRegs(
  int hConnection,
  unsigned char bytStartChannel,
  unsigned char bytCount,
  unsigned short wValue[] );






 int MXEIO_W5K_Connect( char * szIP , unsigned short wPort, unsigned int dwTimeOut, int * hConnection, char * szMACAddr);
 int W5K_DIO_GetIOModes( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwMode );
 int W5K_DIO_SetIOModes( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwMode );
 int W5K_DO_Reads( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwValue );
 int W5K_DO_Writes( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue );
 int W5K_DO_GetModes( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wMode[] );
 int W5K_DO_SetModes( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wMode[] );
 int W5K_DO_GetPowerOnValues( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwValue );
 int W5K_DO_SetPowerOnValues( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue );
 int W5K_DO_GetSafeValues( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwValue );
 int W5K_DO_SetSafeValues( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue );
 int W5K_RLY_GetResetTime( int hConnection,unsigned char bytChannel, unsigned short wValue[] );
 int W5K_RLY_TotalCntReads( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue[] );
 int W5K_RLY_CurrentCntReads( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue[] );
 int W5K_RLY_ResetCnts( int hConnection, unsigned char bytStartChannel, unsigned char bytCount);
 int W5K_DI_Reads( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwValue );
 int W5K_DI_GetModes( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wMode[] );
 int W5K_DI_SetModes( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wMode[] );
 int W5K_DI_GetFilters( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wFilter[] );
 int W5K_DI_SetFilters( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wFilter[] );
 int W5K_Pulse_GetSignalWidths32( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwHiWidth[], unsigned int dwLoWidth[] );
 int W5K_Pulse_SetSignalWidths32( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwHiWidth[], unsigned int dwLoWidth[] );
 int W5K_Pulse_GetOutputCounts( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwOutputCount[] );
 int W5K_Pulse_SetOutputCounts( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwOutputCount[] );
 int W5K_Pulse_GetStartStatuses( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwStatus );
 int W5K_Pulse_SetStartStatuses( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwStatus );
 int W5K_Pulse_GetPowerOnValues( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwValue );
 int W5K_Pulse_SetPowerOnValues( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue );
 int W5K_Pulse_GetSafeValues( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwValue );
 int W5K_Pulse_SetSafeValues( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue );
 int W5K_Cnt_Reads( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue[] );
 int W5K_Cnt_Clears( int hConnection, unsigned char bytStartChannel, unsigned char bytCount );
 int W5K_Cnt_GetOverflows( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwStatus );
 int W5K_Cnt_ClearOverflows( int hConnection, unsigned char bytStartChannel, unsigned char bytCount );
 int W5K_Cnt_GetFilters( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wFilter[] );
 int W5K_Cnt_SetFilters( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wFilter[] );
 int W5K_Cnt_GetStartStatuses( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwStatus );
 int W5K_Cnt_SetStartStatuses( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwStatus );
 int W5K_Cnt_GetPowerOnValues( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwValue );
 int W5K_Cnt_SetPowerOnValues( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue );
 int W5K_Cnt_GetSafeValues( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwValue );
 int W5K_Cnt_SetSafeValues( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue );
 int W5K_Cnt_GetTriggerTypeWords( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short * wType );
 int W5K_Cnt_SetTriggerTypeWords( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short * wType );
 int W5K_Cnt_GetSaveStatusesOnPowerFail( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwMode );
 int W5K_Cnt_SetSaveStatusesOnPowerFail( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwMode );
 int W5K_AI_Reads( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[] );
 int W5K_AI_ReadRaws( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );
 int W5K_AI_ReadMins( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[] );
 int W5K_AI_ReadMinRaws( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );
 int W5K_AI_ResetMins( int hConnection, unsigned char bytStartChannel, unsigned char bytCount);
 int W5K_AI_ReadMaxs( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[] );
 int W5K_AI_ReadMaxRaws( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );
 int W5K_AI_ResetMaxs( int hConnection, unsigned char bytStartChannel, unsigned char bytCount );
 int W5K_AI_GetRanges( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wRange[] );
 int W5K_AI_SetRanges( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wRange[] );
 int W5K_AI_GetChannelStatuses( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short * wValue );
 int W5K_AI_SetChannelStatuses( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short * wValue );

 int W5K_Message_Start( int iProtocol, unsigned short wPort, pfnCALLBACK iProcAddress );
 int W5K_Message_Stop( int iProtocol );
 int W5K_Logic_GetStartStatus( int hConnection, unsigned short * wStatus );
 int W5K_Logic_SetStartStatus( int hConnection, unsigned short wStatus );
 int W5K_GetInternalRegs( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );
 int W5K_SetInternalRegs( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );
 int W5K_GetGprsSignal( int hConnection, unsigned short * wSignal);


 int W5K_GetSafeStatus( int hConnection, unsigned short * wStatus );
 int W5K_ClearSafeStatus( int hConnection );
 int W5K_ListOpcDevices( char * szIP, unsigned int dwTimeOut, unsigned short * wDeviceCount);
 int W5K_GetOpcDevicesInfo( char * szIP, unsigned int dwTimeOut, unsigned short wDeviceCount, char szDeviceInfo[]);
 int W5K_GetOpcHostName( char * szIP, unsigned int dwTimeOut, char szAliasName[]);





 int MXEIO_E1K_Connect( char * szIP , unsigned short wPort, unsigned int dwTimeOut, int * hConnection, char *Password);

 int E1K_DI_Reads(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwValue );
 int E1K_DI_GetModes(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wMode[] );
 int E1K_DI_SetModes( int hConnection, unsigned char bytStartChannel, unsigned char bytCount,unsigned short wMode[] );
 int E1K_DI_GetFilters( int hConnection, unsigned char bytStartChannel, unsigned char bytCount,unsigned short wFilter[] );
 int E1K_DI_SetFilters(int hConnection,unsigned char bytStartChannel, unsigned char bytCount,unsigned short wFilter[] );

 int E1K_DO_Reads( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int *dwValue );
 int E1K_DO_Writes( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue );
 int E1K_DO_GetSafeValues_W( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValues[]);
 int E1K_DO_SetSafeValues_W( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValues[]);
 int E1K_DO_GetModes( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wMode[] );
 int E1K_DO_SetModes( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wMode[] );
 int E1K_DO_GetPowerOnValues( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int *dwValue );
 int E1K_DO_SetPowerOnValues( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue );
 int E1K_DO_GetPowerOnSeqDelaytimes( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );
 int E1K_DO_SetPowerOnSeqDelaytimes( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );

 int E1K_GetSafeStatus( int hConnection, unsigned short *wStatus );
 int E1K_ClearSafeStatus( int hConnection );

 int E1K_DIO_GetIOModes( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int *dwMode );

 int E1K_AI_Reads( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[] );
 int E1K_AI_ReadRaws( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );
 int E1K_AI_ReadMins( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[] );
 int E1K_AI_ReadMinRaws( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );
 int E1K_AI_ResetMins( int hConnection, unsigned char bytStartChannel, unsigned char bytCount);
 int E1K_AI_ReadMaxs( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[] );
 int E1K_AI_ReadMaxRaws( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );
 int E1K_AI_ResetMaxs( int hConnection, unsigned char bytStartChannel, unsigned char bytCount );
 int E1K_AI_GetRanges( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wRange[] );
 int E1K_AI_GetChannelStatuses( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short *wValue );
 int E1K_AI_SetChannelStatuses( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short *wValue );

 int E1K_Cnt_Reads( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue[] );
 int E1K_Cnt_Clears( int hConnection, unsigned char bytStartChannel, unsigned char bytCount );
 int E1K_Cnt_GetOverflows( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int *dwStatus );
 int E1K_Cnt_ClearOverflows( int hConnection, unsigned char bytStartChannel, unsigned char bytCount );
 int E1K_Cnt_GetFilters( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wFilter[] );
 int E1K_Cnt_SetFilters( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wFilter[] );
 int E1K_Cnt_GetStartStatuses( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int *dwStatus );
 int E1K_Cnt_SetStartStatuses( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwStatus );
 int E1K_Cnt_GetPowerOnValues( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int *dwValue );
 int E1K_Cnt_SetPowerOnValues( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue );
 int E1K_Cnt_GetSafeValues( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int *dwValue );
 int E1K_Cnt_SetSafeValues( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue );
 int E1K_Cnt_GetTriggerTypeWords( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short *wType );
 int E1K_Cnt_SetTriggerTypeWords( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short *wType );
 int E1K_Cnt_GetSaveStatusesOnPowerFail( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int *dwMode );
 int E1K_Cnt_SetSaveStatusesOnPowerFail( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwMode );

 int E1K_RLY_TotalCntReads( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue[] );

 int E1K_Pulse_GetSignalWidths( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wHiWidth[], unsigned short wLoWidth[] );
 int E1K_Pulse_SetSignalWidths( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wHiWidth[], unsigned short wLoWidth[] );
 int E1K_Pulse_GetOutputCounts( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwOutputCounts[] );
 int E1K_Pulse_SetOutputCounts( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwOutputCounts[] );
 int E1K_Pulse_GetStartStatuses( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int *dwStatus );
 int E1K_Pulse_SetStartStatuses( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwStatus );
 int E1K_Pulse_GetPowerOnValues( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int *dwValue );
 int E1K_Pulse_SetPowerOnValues( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue );
 int E1K_Pulse_GetSafeValues( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int *dwValue );
 int E1K_Pulse_SetSafeValues( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue );

 int E42_ClearSafeStatus( int hConnection );

 int W5K_ReadStatus( int hConnection, unsigned short * wState, unsigned short * wLastErrorCode );
 int W5K_Exp_Reconnect( int hConnection );
 int W5K_Exp_Status( int hConnection, unsigned short wState[] );
 int W5K_ReadSlotAmount( int hConnection, unsigned short * wAmount );
 int W5K_ReadLastSlotIndex( int hConnection, unsigned short * wLastSlotIndex );
 int W5K_Modbus_List( int hConnection, char* FilePath);
 int W5K_DIO_GetIOModes_Ex( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwMode, unsigned char BytSlot );

 int W5K_DO_Reads_Ex( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwValue, unsigned char BytSlot );
 int W5K_DO_Writes_Ex( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue, unsigned char BytSlot );
 int W5K_DO_GetModes_Ex( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wMode[], unsigned char BytSlot );
# 2332 "/usr/local/include/mxio.h" 3
 int W5K_DI_Reads_Ex( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwValue, unsigned char BytSlot );
 int W5K_DI_GetModes_Ex( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wMode[], unsigned char BytSlot );







 int W5K_Pulse_GetStartStatuses_Ex( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwStatus, unsigned char BytSlot );
 int W5K_Pulse_SetStartStatuses_Ex( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwStatus, unsigned char BytSlot );




 int W5K_Cnt_Reads_Ex( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue[], unsigned char BytSlot );
 int W5K_Cnt_Clears_Ex( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned char BytSlot );
# 2363 "/usr/local/include/mxio.h" 3
 int W5K_AI_Reads_Ex( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[], unsigned char BytSlot );
 int W5K_AI_ReadRaws_Ex( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[], unsigned char BytSlot );
 int W5K_AI_ReadMins_Ex( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[], unsigned char BytSlot );
 int W5K_AI_ReadMinRaws_Ex( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[], unsigned char BytSlot );

 int W5K_AI_ReadMaxs_Ex( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[], unsigned char BytSlot );
 int W5K_AI_ReadMaxRaws_Ex( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[], unsigned char BytSlot );

 int W5K_AI_GetRanges_Ex( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wRange[], unsigned char BytSlot );



 int W5K_VC_Reads_Ex( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[], unsigned char BytSlot );
 int W5K_GetWorkInternalRegs( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );
 int W5K_SetWorkInternalRegs( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );


 int E1K_TC_Reads( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[] );
 int E1K_TC_ReadRaws( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int wValue[] );
 int E1K_TC_ResetMins( int hConnection, unsigned char bytStartChannel, unsigned char bytCount);
 int E1K_TC_ResetMaxs( int hConnection, unsigned char bytStartChannel, unsigned char bytCount);
 int E1K_TC_GetChannelStatuses( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwStatus );
 int E1K_TC_SetChannelStatuses( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwStatus );
 int E1K_TC_GetEngUnits( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wEngUnit[] );
 int E1K_TC_SetEngUnits( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wEngUnit[] );
 int E1K_TC_GetSensorTypes( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wSensorType[] );
 int E1K_TC_SetSensorTypes( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wSensorType[] );
 int E1K_TC_ReadMinRaws( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue[] );
 int E1K_TC_ReadMaxRaws( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue[] );
 int E1K_TC_ReadMins( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[] );
 int E1K_TC_ReadMaxs( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[] );

 int E1K_RTD_Reads( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[] );
 int E1K_RTD_ReadRaws( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );
 int E1K_RTD_ResetMins( int hConnection, unsigned char bytStartChannel, unsigned char bytCount);
 int E1K_RTD_ResetMaxs( int hConnection, unsigned char bytStartChannel, unsigned char bytCount);
 int E1K_RTD_GetChannelStatuses( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwStatus );
 int E1K_RTD_SetChannelStatuses( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwStatus );
 int E1K_RTD_GetEngUnits( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wEngUnit[] );
 int E1K_RTD_SetEngUnits( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wEngUnit[] );
 int E1K_RTD_GetSensorTypes( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wSensorType[] );
 int E1K_RTD_SetSensorTypes( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wSensorType[] );
 int E1K_RTD_ReadMinRaws( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );
 int E1K_RTD_ReadMaxRaws( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );
 int E1K_RTD_ReadMins( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[] );
 int E1K_RTD_ReadMaxs( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[] );

 int E1K_AO_Reads( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[] );
 int E1K_AO_Writes( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[] );
 int E1K_AO_ReadRaws( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );
 int E1K_AO_WriteRaws( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );
 int E1K_AO_GetSafeValues( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[] );
 int E1K_AO_SetSafeValues( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[] );
 int E1K_AO_GetSafeRaws( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );
 int E1K_AO_SetSafeRaws( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );
 int E1K_AO_GetRanges( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wRange[] );
 int E1K_AO_SetRanges( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wRange[] );
 int E1K_AO_GetPowerOnValues( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[] );
 int E1K_AO_SetPowerOnValues( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[] );
 int E1K_AO_GetPowerOnRaws( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );
 int E1K_AO_SetPowerOnRaws( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );



 int MXIO_ReadCoils_Ex( int hConnection, unsigned char bytCoilType, unsigned short wStartCoil, unsigned short wCount, unsigned char bytCoils[] );
 int MXIO_WriteCoils_Ex( int hConnection, unsigned short wStartCoil, unsigned short wCount, unsigned char bytCoils[] );
 int MXIO_ReadRegs_Ex( int hConnection, unsigned char bytRegisterType, unsigned short wStartRegister, unsigned short wCount, unsigned short wRegister[] );
 int MXIO_WriteRegs_Ex( int hConnection, unsigned short wStartRegister, unsigned short wCount, unsigned short wRegister[] );

 int ACTTAG_Modbus_Start( int iProtocol, unsigned short wPort, pfnCALLBACK iProcAddress, unsigned int dwTimeout );
 int ACTTAG_Modbus_Stop( int iProtocol );
 int ACTTAG_TagData_Start( int iProtocol, unsigned short wPort, pfnTagDataCALLBACK iProcAddress, unsigned int dwTimeout );
 int ACTTAG_TagData_Stop( int iProtocol );

 int MXIO_Init_ActiveTag( unsigned short wDataPort, unsigned short wCmdPort, unsigned int dwToleranceTimeout, unsigned int dwCmdTimeout, pfnTagDataCALLBACK iProcAddress, unsigned short wSize);
 int MXIO_Init_ActiveTag_Ex( unsigned short wDataPort, unsigned short wCmdPort, unsigned int dwToleranceTimeout, unsigned int dwCmdTimeout, pfnCALLBACK iProcAddress, unsigned short wSize);
 int MXIO_ListDevs_ActiveTag( unsigned short * wDeviceCount);
 int MXIO_GetDevsInfo_ActiveTag( unsigned short wDeviceCount, char szDeviceInfo[]);
 int MXIO_Close_ActiveTag(void);







  int MXIO_Connect_ActiveTag( unsigned int dwTimeOut, int * hConnection, char * szMACAddr, unsigned short wPort, char * Password);

 int MXIO_RelLock_ActiveTag(void);

 int MXIO_GetSubType( int hConnection, unsigned char bytSlot, unsigned int * dwSubType);


 int MXIO_AutoSearch(int nType, int nRetryCount, int nTimeout, int* nNumber, char struML[]);


 int E1K_DIO_SetIOModes( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwMode );

 int MXIO_ListIF( unsigned short * wIFCount);
 int MXIO_GetIFInfo( unsigned short wIFCount, char IFInfo[]);
 int MXIO_SelectIF( unsigned short wIFCount, char IFInfo[], unsigned int dwIFIndex);

 int MXIO_ChangeDupIP( char* szIP, unsigned short wPort, char* szMACAddr, unsigned int dwTimeOut, char *Password, char* szNewIP);

 int E1K_AO_GetChannelStatuses( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short *wValue );
 int E1K_AO_SetChannelStatuses( int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short *wValue );






 int R1K_DIO_GetIOModes(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwValue );






 int R1K_DI_Reads(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwValue );
 int R1K_DI_GetModes(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wMode[] );
 int R1K_DI_SetModes(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wMode[] );
 int R1K_DI_GetFilters(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wFilter[] );
 int R1K_DI_SetFilters(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wFilter[] );





 int R1K_Cnt_Reads(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue[] );
 int R1K_Cnt_Clears(int hConnection, unsigned char bytStartChannel, unsigned char bytCount );
 int R1K_Cnt_GetOverflows(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwValue );
 int R1K_Cnt_ClearOverflows(int hConnection, unsigned char bytStartChannel, unsigned char bytCount );
 int R1K_Cnt_GetFilters(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wFilter[] );
 int R1K_Cnt_SetFilters(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wFilter[] );
 int R1K_Cnt_GetStartStatuses(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwValue );
 int R1K_Cnt_SetStartStatuses(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue );
 int R1K_Cnt_GetTriggerTypeWords(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wType[] );
 int R1K_Cnt_SetTriggerTypeWords(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wType[] );
 int R1K_Cnt_GetPowerOnValues(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwValue );
 int R1K_Cnt_SetPowerOnValues(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue );
 int R1K_Cnt_GetSafeValues(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwValue );
 int R1K_Cnt_SetSafeValues(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue );
 int R1K_Cnt_GetSaveStatusesOnPowerFail(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwValue );
 int R1K_Cnt_SetSaveStatusesOnPowerFail(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue );





 int R1K_DO_Reads(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwValue );
 int R1K_DO_Writes(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue );
 int R1K_DO_SetSafeValues_W(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[]);
 int R1K_DO_GetSafeValues_W(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[]);
 int R1K_DO_GetModes(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wMode[] );
 int R1K_DO_SetModes(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wMode[] );
 int R1K_DO_GetPowerOnValues(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwValue );
 int R1K_DO_SetPowerOnValues(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue );
 int R1K_DO_GetPowerOnSeqDelaytimes(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );
 int R1K_DO_SetPowerOnSeqDelaytimes(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );






 int R1K_RLY_TotalCntReads(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue[] );
 int R1K_RLY_CurrentCntReads(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue[] );
    int R1K_RLY_ResetCnts(int hConnection, unsigned char bytStartChannel, unsigned char bytCount);






 int R1K_Pulse_GetSignalWidths(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wHiWidth[], unsigned short wLoWidth[] );
 int R1K_Pulse_SetSignalWidths(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wHiWidth[], unsigned short wLoWidth[] );
 int R1K_Pulse_GetOutputCounts(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwOutputCount[] );
 int R1K_Pulse_SetOutputCounts(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwOutputCount[] );
 int R1K_Pulse_GetStartStatuses(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwValue );
 int R1K_Pulse_SetStartStatuses(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue );
 int R1K_Pulse_GetPowerOnValues(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwValue );
 int R1K_Pulse_SetPowerOnValues(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue );
 int R1K_Pulse_GetSafeValues(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int * dwValue );
 int R1K_Pulse_SetSafeValues(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned int dwValue );






 int R1K_AI_Reads(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[] );
 int R1K_AI_ReadRaws(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );
 int R1K_AI_ReadMins(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[] );
 int R1K_AI_ReadMinRaws(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );
 int R1K_AI_ResetMins(int hConnection, unsigned char bytStartChannel, unsigned char bytCount);
 int R1K_AI_ReadMaxs(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[] );
 int R1K_AI_ReadMaxRaws(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );
 int R1K_AI_ResetMaxs(int hConnection, unsigned char bytStartChannel, unsigned char bytCount );
 int R1K_AI_GetRanges(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wRange[] );






 int R1K_AO_Reads(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[] );
 int R1K_AO_Writes(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[] );
 int R1K_AO_ReadRaws(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );
 int R1K_AO_WriteRaws(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );
 int R1K_AO_GetSafeValues(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[] );
 int R1K_AO_SetSafeValues(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[] );
 int R1K_AO_GetSafeRaws(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );
 int R1K_AO_SetSafeRaws(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );
 int R1K_AO_GetRanges(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wRange[] );
 int R1K_AO_SetRanges(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wRange[] );
 int R1K_AO_GetPowerOnValues(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[] );
 int R1K_AO_SetPowerOnValues(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, double dValue[] );
 int R1K_AO_GetPowerOnRaws(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );
 int R1K_AO_SetPowerOnRaws(int hConnection, unsigned char bytStartChannel, unsigned char bytCount, unsigned short wValue[] );





 int R1K_GetSafeStatus(int hConnection, unsigned short * wStatus );
 int R1K_ClearSafeStatus(int hConnection);
# 13 "/home/soic/moxa_hsu/CHAdeMO.h" 2

# 1 "/usr/include/pthread.h" 1 3 4
# 23 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/8/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sched.h" 1 3 4
# 74 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 3 4
struct sched_param
{
  int sched_priority;
};
# 75 "/usr/include/x86_64-linux-gnu/bits/sched.h" 2 3 4


# 93 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4

# 44 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 115 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4


extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
     __attribute__ ((__nothrow__ , __leaf__));
extern cpu_set_t *__sched_cpualloc (size_t __count) __attribute__ ((__nothrow__ , __leaf__)) ;
extern void __sched_cpufree (cpu_set_t *__set) __attribute__ ((__nothrow__ , __leaf__));


# 45 "/usr/include/sched.h" 2 3 4









extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getscheduler (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_yield (void) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_get_priority_max (int __algorithm) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_get_priority_min (int __algorithm) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) __attribute__ ((__nothrow__ , __leaf__));
# 129 "/usr/include/sched.h" 3 4

# 24 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/8/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 34 "/usr/include/time.h" 2 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4
# 48 "/usr/include/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4




extern clock_t clock (void) __attribute__ ((__nothrow__ , __leaf__));


extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));
# 104 "/usr/include/time.h" 3 4
extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));
# 119 "/usr/include/time.h" 3 4
extern struct tm *gmtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));




extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));




extern char *asctime (const struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));






extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__ , __leaf__));



extern int daylight;
extern long int timezone;





extern int stime (const time_t *__when) __attribute__ ((__nothrow__ , __leaf__));
# 196 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int dysize (int __year) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 211 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     __attribute__ ((__nothrow__ , __leaf__));






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ , __leaf__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ , __leaf__));


extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));





extern int timespec_get (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 307 "/usr/include/time.h" 3 4

# 25 "/usr/include/pthread.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4




enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL





};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 115 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 156 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 191 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 229 "/usr/include/pthread.h" 3 4





extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);
# 272 "/usr/include/pthread.h" 3 4
extern int pthread_detach (pthread_t __th) __attribute__ ((__nothrow__ , __leaf__));



extern pthread_t pthread_self (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 430 "/usr/include/pthread.h" 3 4
extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     __attribute__ ((__nothrow__ , __leaf__));
# 495 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 507 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 541 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};
# 681 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)
     ;
# 693 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
  ;
# 734 "/usr/include/pthread.h" 3 4
extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)
     __attribute__ ((__noreturn__))

     __attribute__ ((__weak__))

     ;



struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) __attribute__ ((__nothrow__));





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 807 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));







extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 889 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 1001 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_condattr_init (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1045 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1112 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) __attribute__ ((__nothrow__ , __leaf__));


extern void *pthread_getspecific (pthread_key_t __key) __attribute__ ((__nothrow__ , __leaf__));


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 1146 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) __attribute__ ((__nothrow__ , __leaf__));
# 1160 "/usr/include/pthread.h" 3 4

# 15 "/home/soic/moxa_hsu/CHAdeMO.h" 2

       

# 17 "/home/soic/moxa_hsu/CHAdeMO.h"
typedef struct _CAN_PARA
{
    bool CAN0_read_enable;
    bool CAN1_read_enable;
    bool CAN0_write_enable;
    bool CAN1_write_enable;
    int CANPort_0, CANPort_1;
    int time_tmp;
} CAN_PARA, *PCAN_PARA;
# 2 "/home/soic/moxa_hsu/IOThread.h" 2


double get_now_time(void) {
  struct timespec temp;
  clock_gettime(
# 6 "/home/soic/moxa_hsu/IOThread.h" 3 4
               1
# 6 "/home/soic/moxa_hsu/IOThread.h"
                              , &temp);
  double time_result;
  time_result = temp.tv_sec + (double) temp.tv_nsec / 1000000000.0;
  return time_result;
}

int CANPORT_DEF(int can_port)
{
    struct sockaddr_can addr;
    struct ifreq ifr;
    int s;
    s = socket(
# 17 "/home/soic/moxa_hsu/IOThread.h" 3 4
              29
# 17 "/home/soic/moxa_hsu/IOThread.h"
                    , 
# 17 "/home/soic/moxa_hsu/IOThread.h" 3 4
                      SOCK_RAW
# 17 "/home/soic/moxa_hsu/IOThread.h"
                              , 
# 17 "/home/soic/moxa_hsu/IOThread.h" 3 4
                                1
# 17 "/home/soic/moxa_hsu/IOThread.h"
                                       );


    char const *ifname0 = "can0";
    char const *ifname1 = "can1";
    if(can_port == 0)
    {
      strcpy(ifr.
# 24 "/home/soic/moxa_hsu/IOThread.h" 3 4
                ifr_ifrn.ifrn_name
# 24 "/home/soic/moxa_hsu/IOThread.h"
                        , ifname0);
    }
    else if(can_port == 1)
    {
      strcpy(ifr.
# 28 "/home/soic/moxa_hsu/IOThread.h" 3 4
                ifr_ifrn.ifrn_name
# 28 "/home/soic/moxa_hsu/IOThread.h"
                        , ifname1);
    }

    ioctl(s, 
# 31 "/home/soic/moxa_hsu/IOThread.h" 3 4
            0x8933
# 31 "/home/soic/moxa_hsu/IOThread.h"
                        , &ifr);
    addr.can_family = 
# 32 "/home/soic/moxa_hsu/IOThread.h" 3 4
                     29
# 32 "/home/soic/moxa_hsu/IOThread.h"
                           ;
    addr.can_ifindex = ifr.
# 33 "/home/soic/moxa_hsu/IOThread.h" 3 4
                          ifr_ifru.ifru_ivalue
# 33 "/home/soic/moxa_hsu/IOThread.h"
                                     ;
    bind(s, (struct sockaddr *)&addr, sizeof(addr));
    return s;
}


void *canwrite0(void *args)
{
    printf("CAN0 write ready！\n");
   PCAN_PARA pstPara = (PCAN_PARA) args;
    struct can_frame frame;
    int ret;
    while (pstPara->CAN0_write_enable)
    {

        frame.can_id = 0x500;
        frame.can_dlc = 8;
        frame.data[0] = pstPara->time_tmp;
        frame.data[1] = 0x00;
        frame.data[2] = 0x00;
        frame.data[3] = 0x00;
        frame.data[4] = 0xFF;
        frame.data[5] = 0xFF;
        frame.data[6] = 0xFF;
        frame.data[7] = 0xFF;
        ret = write(pstPara->CANPort_0, &frame, sizeof(struct can_frame));

        frame.can_id = 0x501;
        frame.can_dlc = 8;
        frame.data[0] = 0x00;
        frame.data[1] = pstPara->time_tmp;
        frame.data[2] = 0x00;
        frame.data[3] = 0x00;
        frame.data[4] = 0xFF;
        frame.data[5] = 0xFF;
        frame.data[6] = 0xFF;
        frame.data[7] = 0xFF;
        ret = write(pstPara->CANPort_0, &frame, sizeof(struct can_frame));

        usleep(99900);
    }
    pthread_exit(
# 74 "/home/soic/moxa_hsu/IOThread.h" 3 4
                ((void *)0)
# 74 "/home/soic/moxa_hsu/IOThread.h"
                    );
}

void *canwrite1(void *args)
{
    printf("CAN1 write ready！\n");
   PCAN_PARA pstPara = (PCAN_PARA) args;
    struct can_frame frame;
    int ret;
    while (pstPara->CAN1_write_enable)
    {


        frame.can_id = 0x100;
        frame.can_dlc = 8;
        frame.data[0] = 0x00;
        frame.data[1] = 0x00;
        frame.data[2] = pstPara->time_tmp;
        frame.data[3] = 0x00;
        frame.data[4] = 0xFF;
        frame.data[5] = 0xFF;
        frame.data[6] = 0xFF;
        frame.data[7] = 0xFF;
        ret = write(pstPara->CANPort_1, &frame, sizeof(struct can_frame));

        frame.can_id = 0x109;
        frame.can_dlc = 8;
        frame.data[0] = 0x00;
        frame.data[1] = 0x11;
        frame.data[2] = 0x00;
        frame.data[3] = pstPara->time_tmp;
        frame.data[4] = 0xFF;
        frame.data[5] = 0xFF;
        frame.data[6] = 0xFF;
        frame.data[7] = 0xFF;
        ret = write(pstPara->CANPort_1, &frame, sizeof(struct can_frame));


        usleep(99900);
    }
    pthread_exit(
# 114 "/home/soic/moxa_hsu/IOThread.h" 3 4
                ((void *)0)
# 114 "/home/soic/moxa_hsu/IOThread.h"
                    );
}

void *canread0(void *args)
{
    printf("CAN0 read ready！\n");
   PCAN_PARA pstPara = (PCAN_PARA) args;
    struct can_frame frame;
    int ret, count_temp;
    double now_time;

    while (pstPara->CAN0_read_enable)
    {
      ret = read(pstPara->CANPort_0, &frame, sizeof(struct can_frame));
      now_time = get_now_time();



        printf("CAN0 received: %010.4f %03x [%d] ", now_time, frame.can_id, frame.can_dlc);
        for (int i = 0; i < frame.can_dlc; i++) printf(" %02x", frame.data[i]);
        printf("\n");




      count_temp++;
      if(count_temp >10)
      {
        count_temp = 0;
        usleep(9900);
      }

    }
    pthread_exit(
# 147 "/home/soic/moxa_hsu/IOThread.h" 3 4
                ((void *)0)
# 147 "/home/soic/moxa_hsu/IOThread.h"
                    );
}

void *canread1(void *args)
{
    printf("CAN1 read ready！\n");
   PCAN_PARA pstPara = (PCAN_PARA) args;
    struct can_frame frame;
    int ret, count_temp;
    double now_time;

    while (pstPara->CAN1_read_enable)
    {
      ret = read(pstPara->CANPort_1, &frame, sizeof(struct can_frame));
      now_time = get_now_time();




        printf("CAN0 received: %010.4f %03x [%d] ", now_time, frame.can_id, frame.can_dlc);
        for (int i = 0; i < frame.can_dlc; i++) printf(" %02x", frame.data[i]);
        printf("\n");




      count_temp++;
      if(count_temp >10)
      {
        count_temp = 0;
        usleep(9900);
      }

      count_temp++;
      if(count_temp >10)
      {
        count_temp = 0;
        usleep(9900);
      }
    }
    pthread_exit(
# 187 "/home/soic/moxa_hsu/IOThread.h" 3 4
                ((void *)0)
# 187 "/home/soic/moxa_hsu/IOThread.h"
                    );
}
